//@version=6
//
strategy(title='God 62 PERSONAL - SIMPLE & EFFECTIVE', overlay=true, pyramiding=0, default_qty_type=strategy.percent_of_equity, default_qty_value=10, calc_on_every_tick=false)
//
// === INPUTS ===
res    = input.timeframe(title='TIMEFRAME', defval='15', group ="NON REPAINT")
useRes = input(defval=true, title='Use Alternate Signals')
intRes = input.int(defval=8, title='Multiplier for Alternate Signals')
stratRes = timeframe.ismonthly ? str.tostring(timeframe.multiplier * intRes, '###M') : timeframe.isweekly ? str.tostring(timeframe.multiplier * intRes, '###W') : timeframe.isdaily ? str.tostring(timeframe.multiplier * intRes, '###D') : timeframe.isintraday ? str.tostring(timeframe.multiplier * intRes, '####') : '60'
basisType = input.string(defval='ALMA', title='MA Type: ', options=['TEMA', 'HullMA', 'ALMA'])
basisLen = input.int(defval=2, title='MA Period', minval=1)
offsetSigma = input.int(defval=5, title='Offset for LSMA / Sigma for ALMA', minval=0)
offsetALMA = input.float(defval=0.85, title='Offset for ALMA', minval=0, step=0.01)
scolor = input(true, title='Show coloured Bars to indicate Trend?')
delayOffset = input.int(defval=0, title='Delay Open/Close MA (Forces Non-Repainting)', minval=0, step=1)
tradeType = input.string('BOTH', title='What trades should be taken : ', options=['LONG', 'SHORT', 'BOTH', 'NONE'])

// === SIMPLE ALGORITHM SETTINGS ===
// RSI settings
rsiPeriod = input.int(14, title="RSI Period", minval=10, maxval=30, group="Momentum")
rsiOverbought = input.int(70, title="RSI Overbought", minval=65, maxval=80, group="Momentum")
rsiOversold = input.int(30, title="RSI Oversold", minval=20, maxval=35, group="Momentum")

// Moving average settings
fastEma = input.int(20, title="Fast EMA", minval=10, maxval=50, group="Trend")
slowEma = input.int(50, title="Slow EMA", minval=30, maxval=200, group="Trend")

// Volume settings
volumePeriod = input.int(20, title="Volume SMA Period", minval=10, maxval=50, group="Volume")
volumeMultiplier = input.float(1.2, title="Volume Multiplier", minval=1.0, maxval=2.0, step=0.1, group="Volume")

// Exit management
enableTakeProfit = input.bool(true, title="Enable Take Profit", group="Exit Management")
takeProfitPercent = input.float(2.0, title="Take Profit %", minval=1.0, maxval=10.0, step=0.1, group="Exit Management")
enableStopLoss = input.bool(true, title="Enable Stop Loss", group="Exit Management")
stopLossPercent = input.float(1.5, title="Stop Loss %", minval=0.5, maxval=5.0, step=0.1, group="Exit Management")

// === /INPUTS ===

// === NON-REPAINTING SECURITY FUNCTION ===
rp_security(_symbol, _res, _src) =>
    request.security(_symbol, _res, _src, barmerge.gaps_off, barmerge.lookahead_off)

// === BASE FUNCTIONS ===
// Returns MA input selection variant, default to SMA if blank or typo.
variant(type, src, len, offSig, offALMA) =>
    v1 = ta.sma(src, len)  // Simple
    v2 = ta.ema(src, len)  // Exponential
    v3 = 2 * v2 - ta.ema(v2, len)  // Double Exponential
    v4 = 3 * (v2 - ta.ema(v2, len)) + ta.ema(ta.ema(v2, len), len)  // Triple Exponential
    v5 = ta.wma(src, len)  // Weighted
    v6 = ta.vwma(src, len)  // Volume Weighted
    v7 = 0.0
    sma_1 = ta.sma(src, len)  // Smoothed
    v7 := na(v7[1]) ? sma_1 : (v7[1] * (len - 1) + src) / len
    v8 = ta.wma(2 * ta.wma(src, len / 2) - ta.wma(src, len), math.round(math.sqrt(len)))  // Hull
    v9 = ta.linreg(src, len, offSig)  // Least Squares
    v10 = ta.alma(src, len, offALMA, offSig)  // Arnaud Legoux
    v11 = ta.sma(v1, len)  // Triangular (extreme smooth)
    // SuperSmoother filter
    // Â© 2013  John F. Ehlers
    a1 = math.exp(-1.414 * 3.14159 / len)
    b1 = 2 * a1 * math.cos(1.414 * 3.14159 / len)
    c2 = b1
    c3 = -a1 * a1
    c1 = 1 - c2 - c3
    v12 = 0.0
    v12 := c1 * (src + nz(src[1])) / 2 + c2 * nz(v12[1]) + c3 * nz(v12[2])
    type == 'EMA' ? v2 : type == 'DEMA' ? v3 : type == 'TEMA' ? v4 : type == 'WMA' ? v5 : type == 'VWMA' ? v6 : type == 'SMMA' ? v7 : type == 'HullMA' ? v8 : type == 'LSMA' ? v9 : type == 'ALMA' ? v10 : type == 'TMA' ? v11 : type == 'SSMA' ? v12 : v1

// === /BASE FUNCTIONS ===

// === SERIES SETUP ===
closeSeries = variant(basisType, close[delayOffset], basisLen, offsetSigma, offsetALMA)
openSeries = variant(basisType, open[delayOffset], basisLen, offsetSigma, offsetALMA)
// === /SERIES ===

// Get Alternate resolution Series if selected - USING NON-REPAINTING FUNCTION
closeSeriesAlt = useRes ? rp_security(syminfo.tickerid, stratRes, closeSeries) : closeSeries
openSeriesAlt = useRes ? rp_security(syminfo.tickerid, stratRes, openSeries) : openSeries

// === SIMPLE ALGORITHM CALCULATIONS ===
// Calculate RSI
rsi = ta.rsi(close, rsiPeriod)

// Calculate EMAs
fastEmaValue = ta.ema(close, fastEma)
slowEmaValue = ta.ema(close, slowEma)

// Calculate volume confirmation
volumeSma = ta.sma(volume, volumePeriod)
volumeConfirmation = volume > volumeSma * volumeMultiplier

// Calculate basic crossover signals
basicLong = ta.crossover(closeSeriesAlt, openSeriesAlt)
basicShort = ta.crossunder(closeSeriesAlt, openSeriesAlt)

// === SIGNAL GENERATION ===
// Long entry conditions
longCondition = basicLong and 
                rsi < rsiOverbought and 
                close > fastEmaValue and 
                fastEmaValue > slowEmaValue and 
                volumeConfirmation

// Short entry conditions
shortCondition = basicShort and 
                 rsi > rsiOversold and 
                 close < fastEmaValue and 
                 fastEmaValue < slowEmaValue and 
                 volumeConfirmation

// Exit conditions
exitLong = ta.crossunder(close, fastEmaValue) or rsi > rsiOverbought
exitShort = ta.crossover(close, fastEmaValue) or rsi < rsiOversold

// Final signals
buy = longCondition
sell = shortCondition

// === SIGNAL PLOTTING ===
plotshape(buy, title="Buy", text='BUY', style=shape.labelup, location=location.belowbar, color=color.new(#00DBFF, 0), textcolor=color.white, size=size.normal)
plotshape(sell, title="Sell", text='SELL', style=shape.labeldown, location=location.abovebar, color=color.new(#E91E63, 0), textcolor=color.white, size=size.normal)

// Plot exit signals
plotshape(exitLong, title="Exit Long", text='EXIT', style=shape.circle, location=location.abovebar, color=color.orange, textcolor=color.white, size=size.small)
plotshape(exitShort, title="Exit Short", text='EXIT', style=shape.circle, location=location.belowbar, color=color.orange, textcolor=color.white, size=size.small)

// === STRATEGY ===
// stop loss
slPoints = input.int(defval=0, title='Initial Stop Loss Points (zero to disable)', minval=0)
tpPoints = input.int(defval=0, title='Initial Target Profit Points (zero for disable)', minval=0)
// Include bar limiting algorithm
ebar = input.int(defval=4000, title='Number of Bars for Back Testing', minval=0)
dummy = input(false, title='- SET to ZERO for Daily or Longer Timeframes')

//
// Calculate how many bars since last bar
tdays = (timenow - time) / 60000.0  // number of minutes since last bar
tdays := timeframe.ismonthly ? tdays / 1440.0 / 5.0 / 4.3 / timeframe.multiplier : timeframe.isweekly ? tdays / 1440.0 / 5.0 / timeframe.multiplier : timeframe.isdaily ? tdays / 1440.0 / timeframe.multiplier : tdays / timeframe.multiplier  // number of bars since last bar
//
//set up exit parameters
TP = tpPoints > 0 ? tpPoints : na
SL = slPoints > 0 ? slPoints : na

// === /STRATEGY ===

// === ALERT MESSAGES ===
i_alert_txt_entry_long = input.text_area(defval = "", title = "Long Entry Message", group = "Alerts")
i_alert_txt_entry_short = input.text_area(defval = "", title = "Short Entry Message", group = "Alerts")

// === STRATEGY EXECUTION ===
// Entries and Exits with TP/SL
if buy and tradeType != 'SHORT' and tradeType != 'NONE'
    strategy.entry("Long", strategy.long, alert_message = i_alert_txt_entry_long)

if sell and tradeType != 'LONG' and tradeType != 'NONE'
    strategy.entry("Short", strategy.short, alert_message = i_alert_txt_entry_short)

// === EXIT MANAGEMENT ===
// Exit long positions
if exitLong and strategy.position_size > 0
    strategy.close("Long", comment="Exit Signal")

// Exit short positions  
if exitShort and strategy.position_size < 0
    strategy.close("Short", comment="Exit Signal")

// === VISUAL INDICATORS ===
// Plot EMAs
plot(fastEmaValue, title="Fast EMA", color=color.blue, linewidth=2)
plot(slowEmaValue, title="Slow EMA", color=color.red, linewidth=2)

// Plot RSI levels
hline(rsiOverbought, title="RSI Overbought", color=color.red, linestyle=hline.style_dashed)
hline(rsiOversold, title="RSI Oversold", color=color.green, linestyle=hline.style_dashed)

// Plot volume confirmation
plot(volumeSma, title="Volume SMA", color=color.gray, linewidth=1, display=display.none)

// === SIGNAL QUALITY INDICATOR ===
// Create a signal quality score (0-100)
signalQuality = 0.0
if buy or sell
    signalQuality := 50.0  // Base score
    
    // Add points for each confirmation
    if close > fastEmaValue and fastEmaValue > slowEmaValue
        signalQuality := signalQuality + 25.0
    
    if volumeConfirmation
        signalQuality := signalQuality + 25.0

// Plot signal quality as background color
bgcolor(buy or sell ? color.new(color.green, 90 - signalQuality) : na, title="Signal Quality")

// === PERFORMANCE METRICS ===
// Calculate win rate
winRate = strategy.wintrades / (strategy.wintrades + strategy.losstrades) * 100
winRate := na(winRate) ? 0 : winRate

// Calculate profit factor
profitFactor = strategy.grossprofit / strategy.grossloss
profitFactor := na(profitFactor) ? 0 : profitFactor

// Display performance metrics on chart
if barstate.islast
    label.new(bar_index, high, "Win Rate: " + str.tostring(math.round(winRate, 2)) + "%\nProfit Factor: " + str.tostring(math.round(profitFactor, 2)), 
              color=winRate > 60 ? color.green : winRate > 50 ? color.orange : color.red,
              textcolor=color.white, style=label.style_label_down, size=size.small)

// === MARKET STATUS ===
// Show current market status
if barstate.islast
    trendText = close > fastEmaValue and fastEmaValue > slowEmaValue ? "BULLISH TREND" : close < fastEmaValue and fastEmaValue < slowEmaValue ? "BEARISH TREND" : "SIDEWAYS"
    trendColor = close > fastEmaValue and fastEmaValue > slowEmaValue ? color.green : close < fastEmaValue and fastEmaValue < slowEmaValue ? color.red : color.orange
    
    label.new(bar_index - 50, low, "Market: " + trendText + "\nRSI: " + str.tostring(math.round(rsi, 1)),
              color=trendColor,
              textcolor=color.white, style=label.style_label_up, size=size.small)

